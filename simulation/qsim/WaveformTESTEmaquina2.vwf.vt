// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/12/2023 09:04:51"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          maquinasecun
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module maquinasecun_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C;
reg D;
reg E;
reg EF;
reg EG;
reg EH;
reg F;
reg T1;
reg T2;
reg clk;
// wires                                               
wire atual;
wire y1;
wire y2;

// assign statements (if any)                          
maquinasecun i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.E(E),
	.EF(EF),
	.EG(EG),
	.EH(EH),
	.F(F),
	.T1(T1),
	.T2(T2),
	.atual(atual),
	.clk(clk),
	.y1(y1),
	.y2(y2)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// EF
initial
begin
	EF = 1'b0;
end 

// EG
initial
begin
	EG = 1'b1;
end 

// EH
initial
begin
	EH = 1'b0;
end 

// T1
initial
begin
	T1 = 1'b0;
end 

// T2
initial
begin
	T2 = 1'b0;
end 
endmodule

